{
	"info": {
		"_postman_id": "5a4ea088-0e31-4a16-af28-d3a567493955",
		"name": "GraphQL",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Hello World",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b2956e85-dfc9-4d1d-b55a-f379739415f0",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GraphQL query for helloWorld\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.helloWorld).to.eql(\"Hello world!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "{\r\n    helloWorld\r\n}",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				},
				"description": "# Getting Started\r\n\r\n## Let's start with a very basic greeting!\r\n\r\nThis is where the fun begins! \r\nEach postman request currently fails. Your job is either do the following:\r\n- Update the GraphQL request to make the Postman test pass\r\n- Update the code to make the postman test pass"
			},
			"response": []
		},
		{
			"name": "GraphQL Server-Side Components",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "59f613f5-aac0-42d4-9af0-59eaf1a9a254",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The Query, the Schema, and the Resolver\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.helloWorld).to.eql(\"Hello world!\");\r",
							"    pm.expect(jsonData.data.serverComponents).to.eql(\"The Query, The Schema, and The Resolver\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "{\r\n    helloWorld\r\n    serverComponents\r\n}",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				},
				"description": "**HINT:** Check the needed GraphQL server-side components\r\n\r\n**Schema**\r\n\r\nA GraphQL schema is at the center of any GraphQL server implementation and describes the functionality available to the clients which connect to it.\r\n\r\n**Query**\r\n\r\nA GraphQL query is the client application request to retrieve data from database or legacy API's.\r\n\r\n**Resolver**\r\n\r\nResolvers provide the instructions for turning a GraphQL operation into data. They resolve the query to data by defining resolver functions."
			},
			"response": []
		},
		{
			"name": "GraphQL Default Scalar Types",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8ca2ca20-1fd8-4747-bef9-c2db90d794a5",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GraphQL Scalar Type\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.helloWorld).to.eql(\"Hello world!\");\r",
							"    pm.expect(jsonData.data.helloWorld).to.be.a(\"string\");\r",
							"    \r",
							"    pm.expect(jsonData.data.thisIsAnInt).to.eql(19);\r",
							"    pm.expect(jsonData.data.thisIsAnInt).to.be.a(\"number\");\r",
							"    \r",
							"    pm.expect(jsonData.data.thisIsAFloat).to.eql(712.94);\r",
							"    pm.expect(jsonData.data.thisIsAFloat).to.be.a(\"number\");\r",
							"\r",
							"    pm.expect(jsonData.data.thisIsABoolean).to.be.true;\r",
							"\r",
							"    pm.expect(jsonData.data.thisIsAnId).to.eql(\"ID00001\");\r",
							"    pm.expect(jsonData.data.thisIsAnId).to.be.a(\"string\");\r",
							"\r",
							"    pm.expect(jsonData.data.thisIsAnEnum).to.eql(\"Manager\");\r",
							"    pm.expect(jsonData.data.thisIsAnEnum).to.be.a(\"string\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "{\r\n    helloWorld\r\n    thisIsAnInt\r\n    thisIsAFloat\r\n    thisIsABoolean\r\n    thisIsAnId\r\n    thisIsAnEnum\r\n}",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				},
				"description": "# Scalar Type\r\n\r\nScalar types are primitive data types that can store only a single value. \r\n\r\nThe default scalar types that GraphQL offers are −\r\n\r\n**Int** − Signed 32-bit Integer\r\n\r\n**Float** − Signed double precision floating point value\r\n\r\n**String** − UTF - 8-character sequence\r\n\r\n**Boolean** − True or false\r\n\r\n**ID** − A unique identifier, often used as a unique identifier to fetch an object or as the key for a cache.\r\n\r\nThe syntax for defining a scalar type is as follows −\r\n> field: data_type\r\n\r\nThe snippet given below defines a field named greeting which returns String value.\r\n> greeting: String"
			},
			"response": []
		},
		{
			"name": "GraphQL Object Type",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0c5737ce-8517-4810-8fa6-e4300bea7bc9",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GraphQL Object Type\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.employees).to.be.not.empty\r",
							"    pm.expect(jsonData.data.employees).to.be.an(\"array\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "{\r\n    employees{\r\n        id\r\n        firstName\r\n        lastName\r\n        email\r\n        companyId\r\n        weight\r\n        tenure\r\n        isWfh\r\n    }\r\n}",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				},
				"description": "**Object Type**\r\n\r\nThe object type is the most common type used in a schema and represents a group of fields. \r\n\r\nEach field inside an object type maps to another type, thereby allowing nested types.\r\n\r\nIn other words, an object type is composed of multiple scalar types or object types.\r\n\r\nThe syntax for defining an object type is given below\r\n\r\n    type object_type_name\r\n    {\r\n        field1: data_type\r\n        field2:data_type \r\n        ...\r\n        fieldn:data_type\r\n    }"
			},
			"response": []
		},
		{
			"name": "Get Employee By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "412596b9-46e1-4ffa-a910-0420a7760fca",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Get Employee By ID returns valid data\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.employeeById.id).to.eql(\"EMP005\");\r",
							"    pm.expect(jsonData.data.employeeById.firstName).to.eql(\"Jonathan\");\r",
							"    pm.expect(jsonData.data.employeeById.lastName).to.eql(\"Estilo\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "{\r\n  employeeById(id:\"EMP005\"){\r\n    id\r\n    firstName\r\n    lastName\r\n  }\r\n}",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Employee By Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "da92e152-6081-41c2-94fb-5434508ef8b1",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Get Employee By Name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.employeeByName.id).to.eql(\"EMP001\");\r",
							"    pm.expect(jsonData.data.employeeByName.firstName).to.eql(\"Nick\");\r",
							"    pm.expect(jsonData.data.employeeByName.lastName).to.eql(\"Schrock\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "{\r\n  employeeByName(name:\"Nick Schrock\"){\r\n    id\r\n    firstName\r\n    lastName\r\n  }\r\n}",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Employees Tenure Less Than",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46c09543-a3a0-4553-89f2-d562cde43237",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Get Employees Tenure Less Than\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    for (var i = 0; i<jsonData.data.employeesTenureLessThan.Length;i++){\r",
							"        pm.expect(jsonData.data.employeesTenureLessThan[i].tenure).lessThan(12);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "{\r\n  employeesTenureLessThan(tenure:12){\r\n    id\r\n    firstName\r\n    lastName\r\n    tenure\r\n  }\r\n}",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Employee With Multiple Arguments (Argument: ID)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "616120bd-b2dd-4c0f-b189-db58f00c6b92",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Get Employee With Multiple Arguments (ID)\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.employee.id).to.eql(\"EMP003\");\r",
							"    pm.expect(jsonData.data.employee.firstName).to.eql(\"Lee\");\r",
							"    pm.expect(jsonData.data.employee.lastName).to.eql(\"Byron\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "{\r\n  employee(id:\"EMP003\"){\r\n    id\r\n    firstName\r\n    lastName\r\n  }\r\n}",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Employee With Multiple Arguments (Argument: firstName)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b8cee1bb-800e-480c-903d-dfc90104e836",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Get Employee With Multiple Arguments (firstName)\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.employee.id).to.eql(\"EMP003\");\r",
							"    pm.expect(jsonData.data.employee.firstName).to.eql(\"Lee\");\r",
							"    pm.expect(jsonData.data.employee.lastName).to.eql(\"Byron\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "{\r\n  employee(firstName:\"Lee\"){\r\n    id\r\n    firstName\r\n    lastName\r\n  }\r\n}",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Named GraphQL Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fd99f85e-8530-407d-adf5-df580be0d3eb",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Named GraphQL Request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.employee.id).to.eql(\"EMP005\");\r",
							"    pm.expect(jsonData.data.employee.firstName).to.eql(\"Jonathan\");\r",
							"    pm.expect(jsonData.data.employee.lastName).to.eql(\"Estilo\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query employeeByFirstName($firstName:String) { \r\n  employee(firstName:$firstName)\r\n  {\r\n    id\r\n    firstName\r\n    lastName\r\n  }\r\n}",
						"variables": "{\r\n  \"firstName\": \"Jonathan\"\r\n}"
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Employees By Job Grade",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ccd5198-9e1b-4902-aab3-500277f3279a",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Get Employees By Job Grade\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.employeesByJobGrade).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.employeesByJobGrade[0].id).to.eql(\"EMP006\");\r",
							"    pm.expect(jsonData.data.employeesByJobGrade[0].firstName).to.eql(\"Lorvin\");\r",
							"    pm.expect(jsonData.data.employeesByJobGrade[0].lastName).to.eql(\"de la Cruz\");\r",
							"    pm.expect(jsonData.data.employeesByJobGrade[0].jobGrade).to.eql(\"CuteEngineer\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "{\r\n  employeesByJobGrade(jobGrade:CuteEngineer){\r\n    id\r\n    firstName\r\n    lastName\r\n    jobGrade\r\n  }\r\n}",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Employee",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e9e0850d-ee1c-4335-bb2f-9d4f74b2ad90",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Create Employee GraphQL Request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.createEmployee).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.createEmployee.id).not.to.be.null;\r",
							"    pm.expect(jsonData.data.createEmployee.firstName).to.eql(\"John\");\r",
							"    pm.expect(jsonData.data.createEmployee.lastName).to.eql(\"Doe\");\r",
							"    pm.expect(jsonData.data.createEmployee.email).to.eql(\"john.doe@citech.com\");\r",
							"\r",
							"    pm.variables.set('createdEmployeeId', jsonData.data.createEmployee.id);\r",
							"    console.log(pm.variables.get(\"createdEmployeeId\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\r\n  createEmployee(companyId:\"CITECH01\", employeeDetails: {firstName:\"John\", lastName:\"Doe\", email:\"john.doe@citech.com\"})\r\n  {\r\n      id\r\n      firstName\r\n      lastName\r\n      email\r\n  }\r\n}",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Employee",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c32adbe0-2a7f-40ba-9839-33dbd2716aa8",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Update Employee GraphQL Request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.updateEmployee).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.updateEmployee.id).to.eql(\"UPDATEID01\");\r",
							"    pm.expect(jsonData.data.updateEmployee.firstName).to.eql(\"Jonathan\");\r",
							"    pm.expect(jsonData.data.updateEmployee.lastName).to.eql(\"Wick\");\r",
							"    pm.expect(jsonData.data.updateEmployee.email).to.eql(\"jon.wick@citech.com\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "e5ec9003-0cc4-4301-b9f9-84078c541b25",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\r\n  updateEmployee(id:\"UPDATEID01\", employeeDetails: {firstName:\"Jonathan\", lastName:\"Wick\", email:\"jon.wick@citech.com\"})\r\n  {\r\n      id\r\n      firstName\r\n      lastName\r\n      email\r\n  }\r\n}",
						"variables": "{\r\n    \"id\": \"{{createdEmployeeId}}\"\r\n}"
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Employee",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "38f5b8df-a19f-4b31-9236-664125ee0b2d",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Delete Employee GraphQL Request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.deleteEmployee).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.deleteEmployee.id).to.eql(\"DELETEID01\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2304c55b-a90e-444d-985f-21fe43faadc0",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\r\n  deleteEmployee(id:\"DELETEID01\")\r\n  {\r\n      id\r\n      firstName\r\n      lastName\r\n      email\r\n  }\r\n}",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "",
							"disabled": true
						}
					]
				},
				"description": "**NOTE: Once you delete an employee it will no longer exist in the DB**"
			},
			"response": []
		},
		{
			"name": "Create Company",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "708db2be-d1c3-4f89-bd3b-03e517ade212",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Create Company GraphQL Request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.createCompany).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.createCompany.id).not.to.be.null;\r",
							"    pm.expect(jsonData.data.createCompany.name).to.eql(\"CINC\");\r",
							"    pm.expect(jsonData.data.createCompany.location).to.eql(\"Japan\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\r\n  createCompany(companyDetails: {name:\"CINC\", location:\"Japan\"})\r\n  {\r\n      id\r\n      name\r\n      location      \r\n  }\r\n}",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Company",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "66e66dfe-b9ad-4ed4-991a-d32414343d17",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Update Company GraphQL Request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.updateCompany).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.updateCompany.id).to.eql(\"UPDATECOMP01\");\r",
							"    pm.expect(jsonData.data.updateCompany.name).to.eql(\"CEL Update\");\r",
							"    pm.expect(jsonData.data.updateCompany.location).to.eql(\"3TS Building\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\r\n  updateCompany(id:\"UPDATECOMP01\", companyDetails: {name:\"CEL Update\", location:\"3TS Building\"})\r\n  {\r\n      id\r\n      name\r\n      location      \r\n  }\r\n}",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Company",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aee69e0e-693d-470b-af44-4d5ea990da52",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Delete Company GraphQL Request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.deleteCompany).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.deleteCompany.id).to.eql(\"DELETECOMP01\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\r\n  deleteCompany(id:\"DELETECOMP01\")\r\n  {\r\n      id\r\n      name\r\n      location      \r\n  }\r\n}",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}