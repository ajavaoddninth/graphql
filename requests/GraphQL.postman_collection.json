{
	"info": {
		"_postman_id": "46f7e1d1-090f-42d3-b0a0-17f7cd98c378",
		"name": "GraphQL",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "01 - Hello World",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1c5a8c50-8ef6-423e-888c-3ee787a9074f",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GraphQL query for helloWorld\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.helloWorld).to.eql(\"Hello world!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "# Update query to get \"Hello world!\"\r\n# Check the schema on how to get the value",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{graphql_endpoint}}/graphql",
					"host": [
						"{{graphql_endpoint}}"
					],
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				},
				"description": "# Getting Started\r\n\r\n## Let's start with a very basic greeting!\r\n\r\nThis is where the fun begins! \r\nEach postman request currently fails. Your job is either do the following:\r\n- Update the GraphQL request to make the Postman test pass\r\n- Update the code to make the postman test pass"
			},
			"response": []
		},
		{
			"name": "02 - GraphQL Server-Side Components",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f5142f6b-9ab4-4270-958a-cc9c76eeb4c2",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The Query, the Schema, and the Resolver\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.serverComponents).to.eql(\"The Query, The Schema, and The Resolver\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "# Update schema and resolver.\r\n# Create a field `serverComponents` in Query type to return \"The Query, The Schema, and The Resolver\".\r\n\r\n{\r\n    serverComponents\r\n}",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{graphql_endpoint}}/graphql",
					"host": [
						"{{graphql_endpoint}}"
					],
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				},
				"description": "**HINT:** Check the needed GraphQL server-side components\r\n\r\n**Schema**\r\n\r\nA GraphQL schema is at the center of any GraphQL server implementation and describes the functionality available to the clients which connect to it.\r\n\r\n**Query**\r\n\r\nA GraphQL query is the client application request to retrieve data from database or legacy API's.\r\n\r\n**Resolver**\r\n\r\nResolvers provide the instructions for turning a GraphQL operation into data. They resolve the query to data by defining resolver functions."
			},
			"response": []
		},
		{
			"name": "03 - GraphQL Default Scalar Types",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7e371616-cf91-4f76-b661-0b615e2831eb",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GraphQL Scalar Type\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData.data.thisIsAnInt).to.eql(19);\r",
							"    pm.expect(jsonData.data.thisIsAnInt).to.be.a(\"number\");\r",
							"    \r",
							"    pm.expect(jsonData.data.thisIsAFloat).to.eql(712.94);\r",
							"    pm.expect(jsonData.data.thisIsAFloat).to.be.a(\"number\");\r",
							"\r",
							"    pm.expect(jsonData.data.thisIsABoolean).to.be.true;\r",
							"\r",
							"    pm.expect(jsonData.data.thisIsAnId).to.eql(\"ID00001\");\r",
							"    pm.expect(jsonData.data.thisIsAnId).to.be.a(\"string\");\r",
							"\r",
							"    pm.expect(jsonData.data.thisIsAnEnum).to.eql(\"Manager\");\r",
							"    pm.expect(jsonData.data.thisIsAnEnum).to.be.a(\"string\");\r",
							"\r",
							"    pm.expect(jsonData.data.thisIsAList).to.be.an(\"array\");\r",
							"    pm.expect(jsonData.data.thisIsAList[0]).to.eql(\"Hello\");\r",
							"    pm.expect(jsonData.data.thisIsAList[1]).to.eql(\"world\");\r",
							"    pm.expect(jsonData.data.thisIsAList[2]).to.eql(\"!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "# Update query, schema, and resolver to return the following:\r\n# * thisIsAnInt: returns 19\r\n# * thisIsAFloat: returns 712.94\r\n# * thisIsABoolean: returns true\r\n# * thisIsAnId: returns \"ID00001\"\r\n# * thisIsAnEnum: returns JobGrade.M1 (\"Manager\")\r\n# * thisIsAList: returns [ \"Hello\", \"world\", \"!\" ]",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{graphql_endpoint}}/graphql",
					"host": [
						"{{graphql_endpoint}}"
					],
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				},
				"description": "# Scalar Type\r\n\r\nScalar types are primitive data types that can store only a single value. \r\n\r\nThe default scalar types that GraphQL offers are −\r\n\r\n**Int** − Signed 32-bit Integer\r\n\r\n**Float** − Signed double precision floating point value\r\n\r\n**String** − UTF - 8-character sequence\r\n\r\n**Boolean** − True or false\r\n\r\n**ID** − A unique identifier, often used as a unique identifier to fetch an object or as the key for a cache.\r\n\r\nThe syntax for defining a scalar type is as follows −\r\n> field: data_type\r\n\r\nThe snippet given below defines a field named greeting which returns String value.\r\n> greeting: String"
			},
			"response": []
		},
		{
			"name": "04 - GraphQL Object Type",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b4f4eb7a-7127-421c-9611-aef79f1cc0cb",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GraphQL Object Type\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.employees).to.be.not.empty\r",
							"    pm.expect(jsonData.data.employees).to.be.an(\"array\");\r",
							"\r",
							"    for (let employee of jsonData.data.employees) {\r",
							"        pm.expect(employee).to.have.own.property(\"id\");\r",
							"        pm.expect(employee).to.have.own.property(\"firstName\");\r",
							"        pm.expect(employee).to.have.own.property(\"lastName\");\r",
							"        pm.expect(employee).to.have.own.property(\"email\");\r",
							"        pm.expect(employee).to.have.own.property(\"companyId\");\r",
							"        pm.expect(employee).to.have.own.property(\"weight\");\r",
							"        pm.expect(employee).to.have.own.property(\"tenure\");\r",
							"        pm.expect(employee).to.have.own.property(\"isWfh\");\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "# Update query to get all employees with following fields:\r\n# - id\r\n# - firstName\r\n# - lastName\r\n# - email\r\n# - companyId\r\n# - weight\r\n# - tenure\r\n# - isWfh\r\n# Check the schema and resolvers on how to get the list of employees",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{graphql_endpoint}}/graphql",
					"host": [
						"{{graphql_endpoint}}"
					],
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				},
				"description": "**Object Type**\r\n\r\nThe object type is the most common type used in a schema and represents a group of fields. \r\n\r\nEach field inside an object type maps to another type, thereby allowing nested types.\r\n\r\nIn other words, an object type is composed of multiple scalar types or object types.\r\n\r\nThe syntax for defining an object type is given below\r\n\r\n    type object_type_name\r\n    {\r\n        field1: data_type\r\n        field2:data_type \r\n        ...\r\n        fieldn:data_type\r\n    }"
			},
			"response": []
		},
		{
			"name": "05 - Get Employee By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1e1073e8-54a2-4ee9-b6e8-b582c2137a52",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Get Employee By ID returns valid data\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.employeeById.id).to.eql(\"EMP005\");\r",
							"    pm.expect(jsonData.data.employeeById.firstName).to.eql(\"Jonathan\");\r",
							"    pm.expect(jsonData.data.employeeById.lastName).to.eql(\"Estilo\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "# Update query to get employee with ID \"EMP005\" and return the following fields:\r\n# - id\r\n# - firstName\r\n# - lastName\r\n# Check the schema on how to get an employee by ID",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{graphql_endpoint}}/graphql",
					"host": [
						"{{graphql_endpoint}}"
					],
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "06 - Get Employee By Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "08a5ac5a-b1db-4c26-8978-8329f1c41ab0",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Get Employee By Name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.employeeByName.id).to.eql(\"EMP001\");\r",
							"    pm.expect(jsonData.data.employeeByName.firstName).to.eql(\"Nick\");\r",
							"    pm.expect(jsonData.data.employeeByName.lastName).to.eql(\"Schrock\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "# Update the schema and resolver to get an employee by full name\r\n\r\n{\r\n  employeeByName(name:\"Nick Schrock\") {\r\n    id\r\n    firstName\r\n    lastName\r\n  }\r\n}",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{graphql_endpoint}}/graphql",
					"host": [
						"{{graphql_endpoint}}"
					],
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "07 - Get Employees Tenure Less Than",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b81a4270-c1c2-462e-9b29-ac51b04f475d",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Get Employees Tenure Less Than\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    for (var i = 0; i<jsonData.data.employeesTenureLessThan.Length;i++){\r",
							"        pm.expect(jsonData.data.employeesTenureLessThan[i].tenure).lessThan(12);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "# Update query, schema and resolver to get a list of employees with tenure less than 12,\r\n# and get the following fields:\r\n# - id\r\n# - firstName\r\n# - lastName\r\n# - tenure\r\n# Use `employeesTenureLessThan` as the new field under Query type\r\n# and `tenure` as the argument.",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{graphql_endpoint}}/graphql",
					"host": [
						"{{graphql_endpoint}}"
					],
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "08 - Get Employees By Job Grade",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "45842f24-6efb-4cd2-8d93-938f8f8613c6",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Get Employees By Job Grade\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.employeesByJobGrade).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.employeesByJobGrade[0].id).to.eql(\"EMP006\");\r",
							"    pm.expect(jsonData.data.employeesByJobGrade[0].firstName).to.eql(\"Lorvin\");\r",
							"    pm.expect(jsonData.data.employeesByJobGrade[0].lastName).to.eql(\"de la Cruz\");\r",
							"    pm.expect(jsonData.data.employeesByJobGrade[0].jobGrade).to.eql(\"CuteEngineer\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "# Update query to get a `CuteEngineer` employee with the following fields:\r\n# * id\r\n# * firstName\r\n# * lastName\r\n# * jobGrade\r\n# Check the schema on how to get an employee by job grade ",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{graphql_endpoint}}/graphql",
					"host": [
						"{{graphql_endpoint}}"
					],
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "09 - Get Employee With Multiple Optional Arguments",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a45daf12-9f4c-419b-8816-e691490acef9",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Get Employee With Multiple Optional Arguments\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.emp003Employee.id).to.eql(\"EMP003\");\r",
							"    pm.expect(jsonData.data.emp003Employee.firstName).to.eql(\"Lee\");\r",
							"    pm.expect(jsonData.data.emp003Employee.lastName).to.eql(\"Byron\");\r",
							"\r",
							"    pm.expect(jsonData.data.leeEmployee.id).to.eql(\"EMP003\");\r",
							"    pm.expect(jsonData.data.leeEmployee.firstName).to.eql(\"Lee\");\r",
							"    pm.expect(jsonData.data.leeEmployee.lastName).to.eql(\"Byron\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "# Update schema and resolver to get an employee by ID or first name.\r\n# Use a single field `employee` under Query type with optional arguments\r\n# `id` and `firstName`.\r\n\r\n{\r\n  # You can rename fields in queries\r\n  emp003Employee: employee(id:\"EMP003\") {\r\n    id\r\n    firstName\r\n    lastName\r\n  }\r\n  # You can rename fields in queries\r\n  leeEmployee: employee(firstName:\"Lee\") {\r\n    id\r\n    firstName\r\n    lastName\r\n  }\r\n}",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{graphql_endpoint}}/graphql",
					"host": [
						"{{graphql_endpoint}}"
					],
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "10 - Get Nested Objects In One Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9bf262e9-9587-485f-a85f-45f9b4615188",
						"exec": [
							"pm.test(\"Get Nested Objects In One Request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.company.name).to.eql(\"Canon Information Technologies, Philippines, Inc.\");\r",
							"    pm.expect(jsonData.data.company.location).to.eql(\"Manila\");\r",
							"\r",
							"    pm.expect(jsonData.data.company.employees).to.be.an(\"array\");\r",
							"\r",
							"    for (let employee of jsonData.data.company.employees) {\r",
							"        pm.expect(employee.firstName).to.exist;\r",
							"        pm.expect(employee.lastName).to.exist;\r",
							"        pm.expect(employee.jobGrade).to.exist;\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "# Update resolver to get all employees of a company.\r\n# Use a single field `employees` under Company type.\r\n\r\n{\r\n  company(id: \"CITECH01\") {\r\n      name\r\n      location\r\n      employees {\r\n          firstName\r\n          lastName\r\n          jobGrade\r\n      }\r\n  }\r\n}",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{graphql_endpoint}}/graphql",
					"host": [
						"{{graphql_endpoint}}"
					],
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "11 - Named GraphQL Request with Variables",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "031dd970-4e78-4143-aee3-adad117859ac",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Named GraphQL Request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.employee.id).to.eql(\"EMP005\");\r",
							"    pm.expect(jsonData.data.employee.firstName).to.eql(\"Jonathan\");\r",
							"    pm.expect(jsonData.data.employee.lastName).to.eql(\"Estilo\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "# Update the query to add a variable `$firstName` to the named query and update the\r\n# `GRAPHQL VARIABLES` tab to put a valid JSON object.\r\n# To construct a named query with variables, check the following:\r\n#     https://graphql.org/learn/queries/#operation-name\r\n#     https://graphql.org/learn/queries/#variables\r\n#     https://learning.postman.com/docs/sending-requests/supported-api-frameworks/graphql#working-with-graphql-variables\r\n\r\nquery employeeByFirstName() { \r\n  employee() {\r\n    id\r\n    firstName\r\n    lastName\r\n  }\r\n}",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{graphql_endpoint}}/graphql",
					"host": [
						"{{graphql_endpoint}}"
					],
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "12 - Create Employee",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ddb0b40-2da9-4fc7-99db-0a9df82f179a",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Create Employee GraphQL Request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.createEmployee).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.createEmployee.id).not.to.be.null;\r",
							"    pm.expect(jsonData.data.createEmployee.firstName).to.eql(\"John\");\r",
							"    pm.expect(jsonData.data.createEmployee.lastName).to.eql(\"Doe\");\r",
							"    pm.expect(jsonData.data.createEmployee.email).to.eql(\"john.doe@citech.com\");\r",
							"    pm.expect(jsonData.data.createEmployee.userName).to.eql(\"john.doe\");\r",
							"\r",
							"    pm.collectionVariables.set(\"createdEmployeeId\", jsonData.data.createEmployee.id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "# Update mutation request to create an employee with following details\r\n# * companyId: \"CITECH01\"\r\n# * firstName: \"John\"\r\n# * lastName: \"Doe\"\r\n# * email: \"john.doe@citech.com\"\r\n# * userName: \"john.doe\"\r\n# Check the schema on how to create an employee.\r\n# As much as possible, use a named mutation with variables.\r\n\r\nmutation CreateEmployee($companyId: ID!, $employeeDetails: EmployeeInput) {\r\n}",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{graphql_endpoint}}/graphql",
					"host": [
						"{{graphql_endpoint}}"
					],
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "13 - Update Employee",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "23ee2f18-fd08-4ffa-8faf-c96ac4a87dfa",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Update Employee GraphQL Request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.updateEmployee).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.updateEmployee.id).to.eql(pm.collectionVariables.get(\"createdEmployeeId\"));\r",
							"    pm.expect(jsonData.data.updateEmployee.firstName).to.eql(\"Jonathan\");\r",
							"    pm.expect(jsonData.data.updateEmployee.lastName).to.eql(\"Wick\");\r",
							"    pm.expect(jsonData.data.updateEmployee.email).to.eql(\"jon.wick@citech.com\");\r",
							"    pm.expect(jsonData.data.updateEmployee.userName).to.eql(\"jon.wick\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6171a2ab-ab8b-4f55-b954-e2826d11fc11",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "# Update mutation request to update the employee with the following:\r\n# * firstName: \"Jonathan\"\r\n# * lastName: \"Wick\"\r\n# * email: \"john.wick@citech.com\"\r\n# * userName: \"john.wick\"\r\n# The ID used is the created employee ID stored in Postman collection (no need to change).\r\n# Check the schema on how to update an employee.\r\n# Use a named mutation with variables if possible.\r\n# !!!NOTE!!!: You must successfully run `Create Employee` test first before running this test.",
						"variables": "{\r\n    // Use this as the parameter in your named mutation\r\n    \"id\": \"{{createdEmployeeId}}\"\r\n}"
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{graphql_endpoint}}/graphql",
					"host": [
						"{{graphql_endpoint}}"
					],
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "14 - Delete Employee",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2bdbd2e5-4a14-40fb-b348-270cd43d7714",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Delete Employee GraphQL Request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.deleteEmployee).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.deleteEmployee.id).to.eql(pm.collectionVariables.get(\"createdEmployeeId\"));\r",
							"    pm.collectionVariables.unset(\"createdEmployeeId\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "5ca85747-c891-4b0c-802f-d6c2827c8052",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "# Update mutation request to delete an employee.\r\n# The ID used is the created employee ID stored in Postman collection (no need to change).\r\n# Check the schema on how to delete an employee.\r\n# Use a named mutation with variables if possible.\r\n# !!!NOTE!!!: You must successfully run `Create Employee` test first before running this test.",
						"variables": "{\r\n    // Use this as the parameter in your named mutation\r\n    \"id\": \"{{createdEmployeeId}}\"\r\n}"
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{graphql_endpoint}}/graphql",
					"host": [
						"{{graphql_endpoint}}"
					],
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "",
							"disabled": true
						}
					]
				},
				"description": "**NOTE: Once you delete an employee it will no longer exist in the DB**"
			},
			"response": []
		},
		{
			"name": "15 - Create Company",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "22343809-4642-4737-8942-1515b7bcab9d",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Create Company GraphQL Request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.createCompany).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.createCompany.id).not.to.be.null;\r",
							"    pm.expect(jsonData.data.createCompany.name).to.eql(\"CINC\");\r",
							"    pm.expect(jsonData.data.createCompany.location).to.eql(\"Japan\");\r",
							"\r",
							"    pm.collectionVariables.set(\"createdCompanyId\", jsonData.data.createCompany.id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "# Update schema and resolver to create a company.\r\n# Use the field `createCompany` with CompanyInput `companyDetails` as the argument. \r\n\r\nmutation {\r\n  createCompany(companyDetails: {name:\"CINC\", location:\"Japan\"}) {\r\n      id\r\n      name\r\n      location\r\n  }\r\n}",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{graphql_endpoint}}/graphql",
					"host": [
						"{{graphql_endpoint}}"
					],
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "16 - Update Company",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "27798c56-5c9a-4add-911e-e1f2e38d4621",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Update Company GraphQL Request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.updateCompany).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.updateCompany.id).to.eql(pm.collectionVariables.get(\"createdCompanyId\"));\r",
							"    pm.expect(jsonData.data.updateCompany.name).to.eql(\"CEL Update\");\r",
							"    pm.expect(jsonData.data.updateCompany.location).to.eql(\"3TS Building\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "# Update schema and resolver to update a company.\r\n# Use `updateCompany` as the field with ID! `id` and\r\n# CompanyInput `companyDetails` as arguments.\r\n# !!!NOTE!!!: You must successfully run `Create Company` test first before running this test.\r\n\r\nmutation UpdateCompany($id: ID!) {\r\n  updateCompany(id: $id, companyDetails: {name:\"CEL Update\", location:\"3TS Building\"})\r\n  {\r\n      id\r\n      name\r\n      location      \r\n  }\r\n}",
						"variables": "{\r\n    \"id\": \"{{createdCompanyId}}\"\r\n}"
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{graphql_endpoint}}/graphql",
					"host": [
						"{{graphql_endpoint}}"
					],
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "17 - Delete Company",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "806ad326-0c55-483e-8021-402205530aca",
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Delete Company GraphQL Request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.deleteCompany).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.deleteCompany.id).to.eql(pm.collectionVariables.get(\"createdCompanyId\"));\r",
							"\r",
							"    pm.collectionVariables.unset(\"createdCompanyId\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "# Update schema and resolver to delete a company.\r\n# Use `deleteCompany` as the field with ID! `id` as argument.\r\n# !!!NOTE!!!: You must successfully run `Create Company` test first before running this test.\r\n\r\nmutation DeleteCompany($id: ID!) {\r\n  deleteCompany(id: $id)\r\n  {\r\n      id\r\n      name\r\n      location      \r\n  }\r\n}",
						"variables": "{\r\n    \"id\": \"{{createdCompanyId}}\"\r\n}"
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{graphql_endpoint}}/graphql",
					"host": [
						"{{graphql_endpoint}}"
					],
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "test",
							"value": "test",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "3988457f-13e4-4cea-9ae7-4511352ec605",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "27346d14-8ada-45e3-ac6d-fedeb6d0fed8",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "e17f2470-c920-4d5c-9a89-1bafb4b46d46",
			"key": "graphql_endpoint",
			"value": "http://localhost:54321"
		}
	],
	"protocolProfileBehavior": {}
}