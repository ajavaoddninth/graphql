{"version":3,"sources":["requests/GetEmployeeByUserName.ts","components/Login.tsx","components/PollOption.tsx","components/NewPollOption.tsx","requests/GetOptionsByPollId.ts","requests/CreatePollOption.ts","requests/DeletePollOption.ts","requests/GetVote.ts","requests/SendVote.ts","requests/DiscardVote.ts","components/Poll.tsx","components/NewPoll.tsx","requests/GetPollsByCompanyId.ts","requests/CreatePoll.ts","requests/DeletePoll.ts","components/MainPage.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["GET_EMPLOYEE_BY_USER_NAME","gql","useStyles","makeStyles","theme","login","padding","spacing","margin","marginTop","maxWidth","Login","setEmployee","displayError","useState","userName","setUserName","textFieldError","setTextFieldError","classes","useLazyQuery","fetchPolicy","getEmployeeByName","data","employeeError","error","useEffect","employeeByUserName","message","Paper","className","Grid","container","alignItems","justify","item","xs","TextField","id","label","variant","helperText","fullWidth","onChange","event","target","value","Button","onClick","variables","progress","total","tally","percentage","Math","floor","borderRadius","background","PollOption","props","option","selected","canDelete","deletePollOption","vote","unvote","ListItem","button","ListItemIcon","Radio","edge","color","checked","ListItemText","primary","secondary","ListItemSecondaryAction","IconButton","size","Cancel","NewPollOption","createPollOption","setOption","setError","inset","AddCircle","GET_OPTIONS_BY_POLL_ID","CREATE_POLL_OPTION","DELETE_POLL_OPTION","GET_VOTE","SEND_VOTE","DISCARD_VOTE","poll","marginBottom","width","avatar","marginLeft","marginRight","Poll","employeeId","createdByEmployee","pollId","title","deletePoll","useQuery","optionsData","optionsRefetch","refetch","optionsError","voteData","voteRefetch","voteError","useMutation","createPollOptionMut","createPollOptionError","deletePollOptionMut","deletePollOptionError","sendVoteMut","sendVoteError","sendVote","optionId","discardVoteMut","discardVoteError","discardVote","options","optionsByPollId","map","reduce","runningTotal","alignContent","wrap","Avatar","firstName","toUpperCase","lastName","Typography","noWrap","Divider","List","dense","index","key","undefined","newPoll","NewPoll","employee","createPoll","setTitle","GET_POLLS_BY_COMPANY_ID","CREATE_POLL","DELETE_POLL","MainPage","companyId","pollsData","pollsRefetch","pollsError","createPollMut","createPollError","deletePollMut","deletePollError","polls","pollsByCompanyId","Box","display","flexDirection","createdByEmployeeId","offset","mixins","toolbar","root","flexGrow","App","openSnackbar","setOpenSnackbar","errorToSet","closeError","_","AppBar","position","Toolbar","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","Alert","elevation","severity","Boolean","window","location","hostname","match","client","ApolloClient","uri","process","cache","InMemoryCache","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.c20b7be6.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\r\nimport EmployeeModel from \"../models/EmployeeModel\";\r\n\r\nexport const GET_EMPLOYEE_BY_USER_NAME = gql`\r\n    query GetEmployeeByUserName($userName: String!) {\r\n        employeeByUserName(userName: $userName) {\r\n            id\r\n            companyId\r\n            firstName\r\n            lastName\r\n        }\r\n    }\r\n`;\r\n\r\nexport interface GetEmployeeByUserNameData {\r\n    employeeByUserName: EmployeeModel;\r\n}\r\n\r\nexport interface GetEmployeeByUserNameVars {\r\n    userName: string;\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Grid, makeStyles, Paper, TextField } from \"@material-ui/core\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { GetEmployeeByUserNameData, GetEmployeeByUserNameVars, GET_EMPLOYEE_BY_USER_NAME } from \"../requests/GetEmployeeByUserName\";\r\nimport EmployeeModel from \"../models/EmployeeModel\";\r\nimport { CommonProps } from \"./App\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    login: {\r\n        padding: theme.spacing(2),\r\n        margin: 'auto',\r\n        marginTop: 100,\r\n        maxWidth: 500\r\n    }\r\n}));\r\n\r\ninterface LoginProps {\r\n    setEmployee: (employee: EmployeeModel) => any;\r\n}\r\n\r\nexport default function Login({ setEmployee, displayError }: LoginProps & CommonProps) {\r\n    const [ userName, setUserName ] = useState(\"\");\r\n    const [ textFieldError, setTextFieldError ] = useState(\"\");\r\n    const classes = useStyles();\r\n\r\n    const [ getEmployeeByName, { data, error: employeeError } ] = useLazyQuery<GetEmployeeByUserNameData, GetEmployeeByUserNameVars>(GET_EMPLOYEE_BY_USER_NAME, {\r\n        fetchPolicy: \"no-cache\"\r\n    });\r\n    \r\n    const handleUserNameInput = (event: any) => {\r\n        setTextFieldError(\"\");\r\n        setUserName(event.target.value);\r\n    };\r\n\r\n    const handleLogin = () => {\r\n        if (userName) {\r\n            getEmployeeByName({ variables: { userName } });\r\n        } else {\r\n            setTextFieldError(\"Username cannot be empty\")\r\n        }\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        if (data && data.employeeByUserName) {\r\n            setEmployee(data.employeeByUserName);\r\n        }\r\n\r\n        if (employeeError) {\r\n            if (employeeError.message !== \"Invalid username\") {\r\n                displayError(employeeError);\r\n            } else {\r\n                setTextFieldError(employeeError.message);\r\n            }\r\n        }\r\n    }, [data, setEmployee, employeeError, displayError, setTextFieldError ]);\r\n    \r\n    return (\r\n        <Paper className={classes.login}>\r\n            <Grid container spacing={3} alignItems=\"center\" justify=\"center\">\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        error={!!textFieldError}\r\n                        id=\"user-name\"\r\n                        label=\"Username\"\r\n                        variant=\"outlined\"\r\n                        helperText={ textFieldError ? textFieldError : \" \" }\r\n                        fullWidth\r\n                        onChange={handleUserNameInput}\r\n                        value={userName} />\r\n                </Grid>\r\n                <Grid item xs={12} container alignItems=\"center\" justify=\"center\">\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        onClick={handleLogin}>\r\n                        Login\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n    );\r\n}","import React from \"react\";\r\nimport { ListItem, ListItemIcon, Radio, ListItemText, ListItemSecondaryAction, IconButton, makeStyles } from \"@material-ui/core\";\r\nimport { Cancel } from \"@material-ui/icons\";\r\nimport PollOptionModel from \"../models/PollOptionModel\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    progress: ({ total, tally }: PollOptionProps) => {\r\n        const percentage = total > 0 ? Math.floor((tally / total) * 100) : 0;\r\n\r\n        return {\r\n            padding: 10,\r\n            borderRadius: 3,\r\n            margin: 0,\r\n            background: `linear-gradient(90deg, rgba(150, 150, 150, 0.6) ${percentage}%, #FFFFFF ${percentage}%)`\r\n        }\r\n    }\r\n}));\r\n\r\ninterface PollOptionProps extends PollOptionModel {\r\n    canDelete: boolean;\r\n    total: number;\r\n    selected: boolean;\r\n    deletePollOption: (id: string) => any;\r\n    vote: (id: string) => any;\r\n    unvote: () => any;\r\n}\r\n\r\nexport default function PollOption(props: PollOptionProps) {\r\n    const classes = useStyles(props);\r\n    const { id, option, tally, selected, canDelete, deletePollOption, vote, unvote } = props;\r\n\r\n    const handleClick = () => {\r\n        if (selected) {\r\n            unvote();\r\n        } else {\r\n            vote(id);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ListItem button onClick={handleClick} selected={selected}>\r\n            <ListItemIcon>\r\n                <Radio\r\n                    edge=\"start\"\r\n                    color=\"primary\"\r\n                    checked={selected} />\r\n            </ListItemIcon>\r\n            <ListItemText\r\n                className={classes.progress}\r\n                primary={option}\r\n                secondary={`${tally} voted`}/>\r\n            <ListItemSecondaryAction>\r\n                {\r\n                    canDelete &&\r\n                    <IconButton\r\n                        edge=\"end\"\r\n                        size=\"small\"\r\n                        onClick={() => deletePollOption(id)}>\r\n                        <Cancel/>\r\n                    </IconButton>\r\n                }\r\n            </ListItemSecondaryAction>\r\n        </ListItem>\r\n    );\r\n}","import React, { useState } from \"react\";\r\nimport { ListItem, ListItemText, TextField, ListItemSecondaryAction, IconButton } from \"@material-ui/core\";\r\nimport { AddCircle } from \"@material-ui/icons\";\r\n\r\ninterface NewPollOptionProps {\r\n    createPollOption: (option: string) => any;\r\n}\r\n\r\nexport default function NewPollOption({ createPollOption }: NewPollOptionProps) {\r\n    const [ option, setOption ] = useState(\"\");\r\n    const [ error, setError ] = useState(false);\r\n\r\n    const handleAddPollOption = () => {\r\n        if (option) {\r\n            createPollOption(option);\r\n            setOption(\"\");\r\n        } else {\r\n            setError(true);\r\n        }\r\n    };\r\n\r\n    const handleOptionInput = (event: any) => {\r\n        setError(false);\r\n        setOption(event.target.value);\r\n    };\r\n    \r\n    return (\r\n        <ListItem>\r\n            <ListItemText inset>\r\n                <TextField\r\n                    error={error}\r\n                    size=\"small\"\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    value={option}\r\n                    onChange={handleOptionInput} />\r\n            </ListItemText>\r\n            <ListItemSecondaryAction>\r\n                <IconButton\r\n                    edge=\"end\"\r\n                    size=\"small\"\r\n                    onClick={handleAddPollOption}>\r\n                    <AddCircle color=\"primary\"/>\r\n                </IconButton>\r\n            </ListItemSecondaryAction>\r\n        </ListItem>\r\n    );\r\n}","import { gql } from \"@apollo/client\";\r\nimport PollOptionModel from \"../models/PollOptionModel\";\r\n\r\nexport const GET_OPTIONS_BY_POLL_ID = gql`\r\n    query GetOptionsByPollId($pollId: ID!) {\r\n        optionsByPollId(pollId: $pollId) {\r\n            id\r\n            option\r\n            tally\r\n        }\r\n    }\r\n`;\r\n\r\nexport interface GetOptionsByPollIdData {\r\n    optionsByPollId: PollOptionModel[];\r\n}\r\n\r\nexport interface GetOptionsByPollIdVars {\r\n    pollId: string;\r\n}","import { gql } from \"@apollo/client\";\r\n\r\nexport const CREATE_POLL_OPTION = gql`\r\n    mutation CreatePollOption($pollId: ID!, $option: String!) {\r\n        createPollOption(pollId: $pollId, option: $option) {\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nexport interface CreatePollOptionData {\r\n    createPollOption: { id: string };\r\n}\r\n\r\nexport interface CreatePollOptionVars {\r\n    pollId: string;\r\n    option: string;\r\n}","import { gql } from \"@apollo/client\";\r\n\r\nexport const DELETE_POLL_OPTION = gql`\r\n    mutation DeletePollOption($id: ID!) {\r\n        deletePollOption(id: $id) {\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nexport interface DeletePollOptionData {\r\n    deletePollOption: { id: string };\r\n}\r\n\r\nexport interface DeletePollOptionVars {\r\n    id: string;\r\n}","import { gql } from \"@apollo/client\";\r\nimport VoteModel from \"../models/VoteModel\";\r\n\r\nexport const GET_VOTE = gql`\r\n    query GetVote($employeeId: ID!, $pollId: ID!) {\r\n        vote(employeeId: $employeeId, pollId: $pollId) {\r\n            optionId\r\n        }\r\n    }\r\n`;\r\n\r\nexport interface GetVoteData {\r\n    vote: VoteModel;\r\n}\r\n\r\nexport interface GetVoteVars {\r\n    employeeId: string;\r\n    pollId: string;\r\n}","import { gql } from \"@apollo/client\";\r\nimport VoteModel from \"../models/VoteModel\";\r\n\r\nexport const SEND_VOTE = gql`\r\n    mutation SendVote($employeeId: ID!, $pollId: ID!, $optionId: ID!) {\r\n        sendVote(employeeId: $employeeId, pollId: $pollId, optionId: $optionId) {\r\n            employeeId\r\n            pollId\r\n            optionId\r\n        }\r\n    }\r\n`;\r\n\r\nexport interface SendVoteData {\r\n    sendVote: VoteModel;\r\n}\r\n\r\nexport interface SendVoteVars {\r\n    employeeId: string;\r\n    pollId: string;\r\n    optionId: string;\r\n}","import { gql } from \"@apollo/client\";\r\nimport VoteModel from \"../models/VoteModel\";\r\n\r\nexport const DISCARD_VOTE = gql`\r\n    mutation DiscardVote($employeeId: ID!, $pollId: ID!) {\r\n        discardVote(employeeId: $employeeId, pollId: $pollId) {\r\n            employeeId\r\n            pollId\r\n            optionId\r\n        }\r\n    }\r\n`;\r\n\r\nexport interface DiscardVoteData {\r\n    discardVote: VoteModel;\r\n}\r\n\r\nexport interface DiscardVoteVars {\r\n    employeeId: string;\r\n    pollId: string;\r\n}","import React from \"react\";\r\nimport { Avatar, Divider, Grid, IconButton, List, makeStyles, Paper, Typography } from \"@material-ui/core\";\r\nimport { Cancel } from \"@material-ui/icons\";\r\nimport PollOption from \"./PollOption\";\r\nimport NewPollOption from \"./NewPollOption\";\r\nimport PollModel from \"../models/PollModel\";\r\nimport { GetOptionsByPollIdData, GetOptionsByPollIdVars, GET_OPTIONS_BY_POLL_ID } from \"../requests/GetOptionsByPollId\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport { CreatePollOptionData, CreatePollOptionVars, CREATE_POLL_OPTION } from \"../requests/CreatePollOption\";\r\nimport { DeletePollOptionData, DeletePollOptionVars, DELETE_POLL_OPTION } from \"../requests/DeletePollOption\";\r\nimport { GetVoteData, GetVoteVars, GET_VOTE } from \"../requests/GetVote\";\r\nimport { SendVoteData, SendVoteVars, SEND_VOTE } from \"../requests/SendVote\";\r\nimport { DiscardVoteData, DiscardVoteVars, DISCARD_VOTE } from \"../requests/DiscardVote\";\r\nimport { CommonProps } from \"./App\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    poll: {\r\n        padding: theme.spacing(2),\r\n        marginTop: 30,\r\n        marginBottom: 20,\r\n        width: 500\r\n    },\r\n    avatar: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(3)\r\n    }\r\n}));\r\n\r\ninterface PollProps extends PollModel {\r\n    employeeId: string;\r\n    deletePoll: (id: string) => any;\r\n}\r\n\r\nexport default function Poll({ employeeId, createdByEmployee, id: pollId, title, deletePoll, displayError }: PollProps & CommonProps) {\r\n    const classes = useStyles();\r\n\r\n    const { data: optionsData, refetch: optionsRefetch, error: optionsError } = useQuery<GetOptionsByPollIdData, GetOptionsByPollIdVars>(GET_OPTIONS_BY_POLL_ID, {\r\n        variables: {\r\n            pollId\r\n        },\r\n        fetchPolicy: \"no-cache\"\r\n    });\r\n\r\n    const { data: voteData, refetch: voteRefetch, error: voteError } = useQuery<GetVoteData, GetVoteVars>(GET_VOTE, {\r\n        variables: {\r\n            employeeId,\r\n            pollId\r\n        },\r\n        fetchPolicy: \"no-cache\"\r\n    });\r\n\r\n    const [ createPollOptionMut, { error: createPollOptionError } ] = useMutation<CreatePollOptionData, CreatePollOptionVars>(CREATE_POLL_OPTION);\r\n\r\n    const createPollOption = (option: string) => {\r\n        createPollOptionMut({\r\n            variables: {\r\n                pollId,\r\n                option\r\n            }\r\n        });\r\n\r\n        optionsRefetch();\r\n        voteRefetch();\r\n    };\r\n\r\n    const [ deletePollOptionMut, { error: deletePollOptionError } ] = useMutation<DeletePollOptionData, DeletePollOptionVars>(DELETE_POLL_OPTION);\r\n\r\n    const deletePollOption = (id: string) => {\r\n        deletePollOptionMut({\r\n            variables: {\r\n                id\r\n            }\r\n        });\r\n\r\n        optionsRefetch();\r\n        voteRefetch();\r\n    };\r\n\r\n    const [ sendVoteMut, { error: sendVoteError } ] = useMutation<SendVoteData, SendVoteVars>(SEND_VOTE);\r\n\r\n    const sendVote = (optionId: string) => {\r\n        sendVoteMut({\r\n            variables: {\r\n                employeeId,\r\n                pollId,\r\n                optionId\r\n            }\r\n        });\r\n\r\n        optionsRefetch();\r\n        voteRefetch();\r\n    };\r\n\r\n    const [ discardVoteMut, { error: discardVoteError } ] = useMutation<DiscardVoteData, DiscardVoteVars>(DISCARD_VOTE);\r\n\r\n    const discardVote = () => {\r\n        discardVoteMut({\r\n            variables: {\r\n                employeeId,\r\n                pollId\r\n            }\r\n        });\r\n\r\n        optionsRefetch();\r\n        voteRefetch();\r\n    };\r\n\r\n    if (optionsError) {\r\n        displayError(optionsError);\r\n    } else if (voteError) {\r\n        displayError(voteError)\r\n    } else if (createPollOptionError) {\r\n        displayError(createPollOptionError);\r\n    } else if (deletePollOptionError) {\r\n        displayError(deletePollOptionError);\r\n    } else if (sendVoteError) {\r\n        displayError(sendVoteError);\r\n    } else if (discardVoteError) {\r\n        displayError(discardVoteError);\r\n    }\r\n\r\n    const options = optionsData && optionsData.optionsByPollId ? optionsData.optionsByPollId : [];\r\n\r\n    const total = options\r\n        .map(option => option.tally)\r\n        .reduce((tally, runningTotal) => runningTotal + tally, 0)\r\n        ?? 0;\r\n\r\n    const canDelete = employeeId === createdByEmployee.id;\r\n\r\n    return (\r\n        <Paper className={classes.poll}>\r\n            <Grid container spacing={1} alignItems=\"center\" justify=\"center\" alignContent=\"center\">\r\n                <Grid item xs={10} container alignItems=\"center\" wrap=\"nowrap\">\r\n                    <Avatar className={classes.avatar}>\r\n                        {\r\n                            createdByEmployee.firstName[0].toUpperCase() +\r\n                            createdByEmployee.lastName[0].toUpperCase()\r\n                        }\r\n                    </Avatar>\r\n                    <Typography noWrap>{ title }</Typography>\r\n                </Grid>\r\n                <Grid item xs={2} container justify=\"flex-end\">\r\n                    {\r\n                        canDelete &&\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => deletePoll(pollId)}>\r\n                            <Cancel/>\r\n                        </IconButton>\r\n                    }\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Divider/>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <List dense>\r\n                        {\r\n                            options &&\r\n                            options.map((value, index) =>\r\n                                <PollOption\r\n                                    key={index}\r\n                                    selected={(voteData !== undefined && voteData.vote !== null && voteData.vote.optionId === value.id)}\r\n                                    total={total}\r\n                                    canDelete={canDelete}\r\n                                    deletePollOption={deletePollOption}\r\n                                    vote={sendVote}\r\n                                    unvote={discardVote}\r\n                                    {...value}/>)\r\n                        }\r\n                        <NewPollOption createPollOption={createPollOption} />\r\n                    </List>\r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n    );\r\n}","import React, { useState } from \"react\";\r\nimport { Avatar, Button, Divider, Grid, makeStyles, Paper, TextField } from \"@material-ui/core\";\r\nimport EmployeeModel from \"../models/EmployeeModel\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    newPoll: {\r\n        padding: theme.spacing(2),\r\n        marginTop: 20,\r\n        marginBottom: 20,\r\n        width: 500\r\n    },\r\n    avatar: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(3)\r\n    }\r\n}));\r\n\r\ninterface NewPollProps {\r\n    employee: EmployeeModel,\r\n    createPoll: (title: string) => any;\r\n}\r\n\r\nexport default function NewPoll({ employee, createPoll }: NewPollProps) {\r\n    const classes = useStyles();\r\n    const [ title, setTitle ] = useState(\"\");\r\n    const [ error, setError ] = useState(false);\r\n\r\n    const handleCreatePoll = () => {\r\n        if (title) {\r\n            createPoll(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(true);\r\n        }\r\n    };\r\n\r\n    const handleTitleInput = (event: any) => {\r\n        setError(false);\r\n        setTitle(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <Paper className={classes.newPoll}>\r\n            <Grid container spacing={1} alignItems=\"center\" justify=\"center\" alignContent=\"center\">\r\n                <Grid item xs={12} container alignItems=\"center\" wrap=\"nowrap\">\r\n                    <Avatar className={classes.avatar}>\r\n                        {\r\n                            employee.firstName[0].toUpperCase() +\r\n                            employee.lastName[0].toUpperCase()\r\n                        }\r\n                    </Avatar>\r\n                    <TextField\r\n                        error={error}\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleTitleInput}\r\n                        value={title} />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Divider/>\r\n                </Grid>\r\n                <Grid item xs={12} container justify=\"flex-end\">\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handleCreatePoll}>\r\n                        Create poll\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n    );\r\n}","import { gql } from \"@apollo/client\";\r\nimport PollModel from \"../models/PollModel\";\r\n\r\nexport const GET_POLLS_BY_COMPANY_ID = gql`\r\n    query GetPollsByCompanyId($companyId: ID!) {\r\n        pollsByCompanyId(companyId: $companyId) {\r\n            id\r\n            title\r\n            createdByEmployee {\r\n                id\r\n                firstName\r\n                lastName\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport interface GetPollsByCompanyIdData {\r\n    pollsByCompanyId: PollModel[];\r\n}\r\n\r\nexport interface GetPollsByCompanyIdVars {\r\n    companyId: string;\r\n}","import { gql } from \"@apollo/client\";\r\n\r\nexport const CREATE_POLL = gql`\r\n    mutation CreatePoll($companyId: ID!, $title: String!, $createdByEmployeeId: ID!) {\r\n        createPoll(companyId: $companyId, title: $title, createdByEmployeeId: $createdByEmployeeId) {\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nexport interface CreatePollData {\r\n    createPoll: { id: string };\r\n}\r\n\r\nexport interface CreatePollVars {\r\n    companyId: string;\r\n    title: string;\r\n    createdByEmployeeId: string;\r\n}","import { gql } from \"@apollo/client\";\r\n\r\nexport const DELETE_POLL = gql`\r\n    mutation DeletePoll($id: ID!) {\r\n        deletePoll(id: $id) {\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nexport interface DeletePollData {\r\n    deletePoll: { id: string };\r\n}\r\n\r\nexport interface DeletePollVars {\r\n    id: string;\r\n}","import React from \"react\";\r\nimport { Box } from \"@material-ui/core\";\r\nimport Poll from \"./Poll\";\r\nimport NewPoll from \"./NewPoll\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport { GetPollsByCompanyIdData, GetPollsByCompanyIdVars, GET_POLLS_BY_COMPANY_ID } from \"../requests/GetPollsByCompanyId\";\r\nimport { CreatePollData, CreatePollVars, CREATE_POLL } from \"../requests/CreatePoll\";\r\nimport { DeletePollData, DeletePollVars, DELETE_POLL } from \"../requests/DeletePoll\";\r\nimport { CommonProps } from \"./App\";\r\nimport EmployeeModel from \"../models/EmployeeModel\";\r\n\r\ninterface MainPageProps {\r\n    employee: EmployeeModel\r\n}\r\n\r\nexport default function MainPage({ employee, displayError }: MainPageProps & CommonProps) {\r\n    const { data: pollsData, refetch: pollsRefetch, error: pollsError } = useQuery<GetPollsByCompanyIdData, GetPollsByCompanyIdVars>(GET_POLLS_BY_COMPANY_ID, {\r\n        variables: {\r\n            companyId: employee.companyId\r\n        },\r\n        fetchPolicy: \"no-cache\"\r\n    });\r\n\r\n    const [ createPollMut, { error: createPollError } ] = useMutation<CreatePollData, CreatePollVars>(CREATE_POLL);\r\n\r\n    const createPoll = (title: string) => {\r\n        createPollMut({\r\n            variables: {\r\n                companyId: employee.companyId,\r\n                title,\r\n                createdByEmployeeId: employee.id\r\n            }\r\n        });\r\n        pollsRefetch();\r\n    };\r\n\r\n    const [ deletePollMut, { error: deletePollError } ] = useMutation<DeletePollData, DeletePollVars>(DELETE_POLL);\r\n\r\n    const deletePoll = (id: string) => {\r\n        deletePollMut({\r\n            variables: {\r\n                id\r\n            }\r\n        });\r\n        pollsRefetch();\r\n    };\r\n\r\n    if (pollsError) {\r\n        displayError(pollsError);\r\n    } else if (createPollError) {\r\n        displayError(createPollError);\r\n    } else if (deletePollError) {\r\n        displayError(deletePollError);\r\n    }\r\n\r\n    const polls = pollsData && pollsData.pollsByCompanyId ? pollsData.pollsByCompanyId : [];\r\n\r\n    return (\r\n        <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\r\n            <NewPoll employee={employee} createPoll={createPoll} />\r\n            {\r\n                polls.map((value) =>\r\n                    <Poll\r\n                        employeeId={employee.id}\r\n                        key={value.id}\r\n                        deletePoll={deletePoll}\r\n                        displayError={displayError}\r\n                        {...value} />)\r\n            }\r\n        </Box>\r\n    );\r\n}","import React, { useState } from 'react';\nimport { AppBar, Button, makeStyles, Snackbar, Toolbar, Typography } from '@material-ui/core';\nimport Login from './Login';\nimport MainPage from './MainPage';\nimport EmployeeModel from '../models/EmployeeModel';\nimport { Alert } from '@material-ui/lab';\n\nconst useStyles = makeStyles((theme) => ({\n    offset: theme.mixins.toolbar,\n    root: {\n        flexGrow: 1\n    },\n    title: {\n        flexGrow: 1\n    }\n}));\n\nexport interface CommonProps {\n    displayError: (error: Error) => any;\n}\n\nexport default function App() {\n    const classes = useStyles();\n    const [ employee, setEmployee ] = useState<EmployeeModel | undefined>(undefined);\n    const [ error, setError ] = useState<Error | undefined>(undefined);\n    const [ openSnackbar, setOpenSnackbar ] = useState(false);\n\n    const handleLogout = () => {\n        setEmployee(undefined);\n    }\n\n    const displayError = (errorToSet: Error) => {\n        setError(errorToSet);\n\n        if (error !== errorToSet) {\n            setOpenSnackbar(true);\n        }\n    }\n\n    const closeError = (_: any) => {\n        setOpenSnackbar(false);\n    }\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"fixed\">\n                <Toolbar>\n                    <Typography className={classes.title} variant=\"h6\">\n                        Sample GraphQL Client\n                    </Typography>\n                    {\n                        employee && <Button color=\"inherit\" onClick={handleLogout}>\n                            Logout\n                        </Button>\n                    }\n                </Toolbar>\n            </AppBar>\n            <div className={classes.offset} />\n            {\n                employee ?\n                <MainPage\n                    employee={employee}\n                    displayError={displayError} /> :\n                <Login\n                    setEmployee={setEmployee}\n                    displayError={displayError} />\n            }\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                }}\n                open={openSnackbar}\n                autoHideDuration={6000}\n                onClose={closeError}>\n                <Alert elevation={6} variant=\"filled\" onClose={closeError} severity=\"error\">\n                    {\n                        `An error has occurred: ${error}`\n                    } \n                </Alert>\n            </Snackbar>\n        </div>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./index.css\";\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n    uri: process.env.REACT_APP_GRAPHQL_ENDPOINT,\n    cache: new InMemoryCache()\n});\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}